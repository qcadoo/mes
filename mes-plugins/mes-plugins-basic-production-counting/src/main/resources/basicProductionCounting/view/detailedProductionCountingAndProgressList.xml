<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_PRODUCTION_COUNTING_QUANTITY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="detailedProductionCountingAndProgressList" modelName="order" modelPlugin="orders">

    <component type="window" name="window" reference="window">

        <ribbon>
            <group name="navigation">
                <bigButton name="back" icon="backIcon24.png" state="enabled"
                           action="#{order}.fireEvent(performActionOnBack); #{window}.performBack"/>
            </group>

            <template name="standardGridTemplate" excludeItems="actions.new,actions.copy,actions.delete"/>

            <group name="report">
                <bigButton name="printManifestoReport" icon="pdfIcon24.png" state="disabled">
                    <script>
                        <![CDATA[
                            this.enable("#{translate(basicProductionCounting.detailedProductionCountingAndProgressList.window.ribbon.report.printManifestoReport.label)}");
                            this.addOnChangeListener({
                                onClick: function() {
                                    #{order}.performEvent({
                                        name : 'printManifestoReport',
                                        args : ['pdf']
                                    });
                                }
                            });
                        ]]>
                    </script>
                </bigButton>
            </group>

            <group name="replacements">
                <bigButton name="useReplacement" icon="copyIcon24.png"
                           state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.canClose()) {
									    #{form}.performEvent('useReplacement', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
            </group>
        </ribbon>
        <windowTab name="mainTab">

            <component type="form" name="order" reference="order">
                <component type="select" name="state" field="state"
                           reference="state" defaultVisible="false"/>
                <option type="header" value="true"/>
                <option type="expression" value="#number"/>

                <listener event="performActionOnBack" method="performActionOnBack"
                          class="com.qcadoo.mes.basicProductionCounting.hooks.DetailedProductionCountingAndProgressListHooks"/>
                <listener event="printManifestoReport" method="printManifestoReport"
                          class="com.qcadoo.mes.basicProductionCounting.listeners.DetailedProductionCountingAndProgressListListeners"/>
            </component>
            <component type="form" name="basicProductionCounting"
                       reference="form">
                <component type="grid" name="productionCountingQuantities" reference="grid"
                           useDto="true"
                           source="#{order}.productionCountingQuantityDtos"
                           model="productionCountingQuantityDto">
                    <script>
                        <![CDATA[
                            var resourceIssueButton = #{window}.getRibbonItemOrNull("issue.resourceIssue");
                            var useReplacementBtn = #{window}.getRibbonItemOrNull("replacements.useReplacement");

                            var listener = {
                                onChange: function(selectedEntitiesArray) {
                                     var state = #{state}.getValue().content.value;

                                if (useReplacementBtn && selectedEntitiesArray.length == 1 && selectedEntitiesArray[0].fields.replacement == 1
                                    && selectedEntitiesArray[0].fields.typeOfMaterial == '01component' && selectedEntitiesArray[0].fields.role == '01used'
                                    && state != '05declined' && state != '07abandoned' && state != '04completed') {
                                                    useReplacementBtn.enable("#{translate(productionCounting.productionTrackingDetails.window.ribbon.useReplacement.label)}");
                                                } else {
                                                    useReplacementBtn.disable("#{translate(productionCounting.productionTrackingDetails.window.ribbon.useReplacement.label)}");
                                                }

                                     if(state == '01pending' || state == '04completed' || state == '05declined' || state == '07abandoned') {
                                        if (resourceIssueButton) {
                                            resourceIssueButton.disable("#{translate(basicProductionCounting.detailedProductionCountingAndProgressList.resourceIssue.description)}");
                                        }
                                        return;

                                     }
                                    if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
                                        if (resourceIssueButton) {
                                            resourceIssueButton.disable("#{translate(basicProductionCounting.detailedProductionCountingAndProgressList.resourceIssue.description)}");
                                        }
                                    } else {
                                        var onlyOneRole = true;
                                        var onlyOneTypeOfMaterial = true;
                                        if(selectedEntitiesArray.length > 1) {
                                            for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
                                                if (selectedEntitiesArray[i-1].fields.role != selectedEntitiesArray[i].fields.role) {
                                                    onlyOneRole = false;
                                                    break;
                                                }
                                                if (selectedEntitiesArray[i-1].fields.typeOfMaterial != selectedEntitiesArray[i].fields.typeOfMaterial) {
                                                    onlyOneTypeOfMaterial = false;
                                                    break;
                                                }
                                            }
                                        }

                                        if (onlyOneRole && onlyOneTypeOfMaterial) {
                                            var selectedEntityRole = selectedEntitiesArray[0].fields.role;
                                            var selectedEntityMaterial = selectedEntitiesArray[0].fields.typeOfMaterial;
                                            if (selectedEntityRole == '01used' && selectedEntityMaterial == '01component') {
                                                if (resourceIssueButton) {
                                                    resourceIssueButton.enable("#{translate(basicProductionCounting.detailedProductionCountingAndProgressList.resourceIssue.description)}");
                                                }
                                            } else {
                                                if (resourceIssueButton) {
                                                    resourceIssueButton.disable("#{translate(basicProductionCounting.detailedProductionCountingAndProgressList.resourceIssue.description)}");
                                                }
                                            }
                                        } else {
                                            if (resourceIssueButton) {
                                                resourceIssueButton.disable("#{translate(basicProductionCounting.detailedProductionCountingAndProgressList.resourceIssue.description)}");
                                            }
                                        }
                                    }
                                }
                            }

                            this.addOnChangeListener(listener);
                                var that = this;
                                this.onDeleteButtonClicked = function () {
                                    var selectedEntities = #{grid}.getValue().content.selectedEntities;
                                    if (window.confirm("#{translate(qcadooView.grid.confirmDeleteMessage)}" + "?")) {
                                        #{grid}.fireEvent(null,'removeSelectedProductionCountingQuantities',[selectedEntities]);
                                    }
                            };
                        ]]>
                    </script>
                    <option type="column" name="productNumber" fields="productNumber"
                            link="true" width="70"/>
                    <option type="column" name="productName" fields="productName"
                            link="true" width="100"/>
                    <option type="column" name="technologyInputProductTypeName" fields="technologyInputProductTypeName"
                            link="true" width="60"/>
                    <option type="column" name="nodeNumber" fields="nodeNumber"
                            link="true" width="40"/>
                    <option type="column" name="operationNumber" fields="operationNumber"
                            link="true" width="40"/>
                    <option type="column" name="operationName" fields="operationName"
                            link="true" width="50"/>
                    <option type="column" name="role" fields="role" link="true" width="40"/>
                    <option type="column" name="typeOfMaterial" fields="typeOfMaterial"
                            link="true" width="60"/>
                    <option type="column" name="plannedQuantity" fields="plannedQuantity" width="30"/>
                    <option type="column" name="usedQuantity" fields="usedQuantity" width="30"/>
                    <option type="column" name="producedQuantity" fields="producedQuantity" width="30"/>
                    <option type="column" name="productUnit" fields="productUnit"
                            width="20"/>
                    <option type="column" name="replacement" fields="replacement" width="30"/>
                    <option type="column" name="replacementTo" fields="replacementTo" width="80"/>
                    <option type="order" column="productNumber" direction="asc"/>

                    <option type="searchable" value="replacement,productNumber,productName,technologyInputProductTypeName,replacementTo,nodeNumber,operationNumber,operationName,role,
					    typeOfMaterial,plannedQuantity,usedQuantity,producedQuantity,productUnit"/>
                    <option type="orderable" value="replacement,productNumber,productName,technologyInputProductTypeName,replacementTo,nodeNumber,operationNumber,operationName,role,
					    typeOfMaterial,plannedQuantity,usedQuantity,producedQuantity,productUnit"/>

                    <option type="correspondingView"
                            value="basicProductionCounting/productionCountingQuantityAdvancedDetails"/>
                    <option type="correspondingComponent" value="form"/>
                    <option type="correspondingViewInModal" value="true"/>

                    <option type="creatable" value="true"/>
                    <option type="deletable" value="true"/>
                    <option type="fullscreen" value="true"/>
                    <option type="multiselect" value="true"/>
                    <option type="fixedHeight" value="true"/>

                    <option type="selectableWhenDisabled" value="true"/>

                    <rowStyleResolver
                            class="com.qcadoo.mes.basicProductionCounting.rowStyleResolvers.DetailedProductionCountingAndProgressListCriteriaModifiers"
                            method="fillRowStylesDependsOfTypeOfMaterial"/>

                    <listener event="removeSelectedProductionCountingQuantities"
                              method="onRemoveSelectedProductionCountingQuantities"
                              class="com.qcadoo.mes.basicProductionCounting.hooks.DetailedProductionCountingAndProgressListHooks"/>

                </component>
            </component>
            <option type="fixedHeight" value="true"/>


        </windowTab>
        <windowTab name="changesTab">
            <component type="grid" name="changes" reference="changesGrid"
                       source="#{order}.productionCountingQuantityChanges">

                <option type="column" name="dateAndTime" fields="dateAndTime"/>
                <option type="column" name="product" fields="product" expression="#product['number']"/>
                <option type="column" name="changeType" fields="changeType"/>

                <option type="column" name="plannedQuantityBefore" fields="plannedQuantityBefore"/>
                <option type="column" name="plannedQuantityAfter" fields="plannedQuantityAfter"/>


                <option type="column" name="worker" fields="worker"/>


                <option type="order" column="dateAndTime" direction="asc"/>

                <option type="searchable" value="dateAndTime,changeType,product,plannedQuantityBefore,plannedQuantityAfter,worker"/>
                <option type="orderable" value="dateAndTime,changeType,product,plannedQuantityBefore,plannedQuantityAfter,worker"/>
                <option type="fullscreen" value="true"/>
                <option type="fixedHeight" value="true"/>

            </component>
        </windowTab>
    </component>

    <hooks>
        <beforeRender
                class="com.qcadoo.mes.basicProductionCounting.hooks.DetailedProductionCountingAndProgressListHooks"
                method="setGridEditableDependsOfOrderState"/>
    </hooks>

</view>
