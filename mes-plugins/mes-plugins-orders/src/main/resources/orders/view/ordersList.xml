<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_ORDERS_VIEW" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="ordersList" modelName="orderListDto" menuAccessible="true">

    <component type="window" name="window" reference="window">

        <ribbon>
            <group name="orderListActions" defaultAuthorizationRole="ROLE_PLANNING_ORDERS">
                <bigButton name="new" icon="newIcon24.png" state="enabled"
                           action="#{grid}.performNew;"/>
                <smallButton name="copy" icon="copyIcon16.png" action="#{grid}.performCopy;"
                             state="disabled"/>
                <smallButton name="delete" icon="deleteIcon16.png"
                             action="#{grid}.performDelete;" state="disabled"/>
            </group>

            <group name="actions">
                <bigButton name="refresh" icon="updateIcon24.png" state="enabled"
                           action="#{window}.performRefresh;"/>
            </group>
            <template name="standardGridTemplate" excludeGroups="actions"/>

            <group name="status">
                <smallButton name="acceptOrder" icon="startIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (this.state == "accept") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.acceptOrder.confirm)}")) {
												#{grid}.performEvent('changeState', ['02accepted']);
										};
									} else if (this.state == "begin") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.activateOrder.confirm)}")) {
												#{grid}.performEvent('changeState', ['03inProgress']);
										};
									} else if (this.state == "finish") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.finishOrder.confirm)}")) {
												#{grid}.performEvent('changeState', ['04completed']);
										};
									} else if (this.state == "restart") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.restartOrder.confirm)}")) {
												#{grid}.performEvent('changeState', ['03inProgress']);
										};
									}
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="declineOrder" icon="deleteIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (this.state == "decline") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.declineOrder.confirm)}")) {
												#{grid}.performEvent('changeState', ['05declined']);
										};
									} else if (this.state == "abandon") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.abandonOrder.confirm)}")) {
												#{grid}.performEvent('changeState', ['07abandoned']);
										};
									}
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="interruptOrder" icon="pauseIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.interruptOrder.confirm)}")) {
											#{grid}.performEvent('changeState', ['06interrupted']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
            </group>
            <group name="split">
                <smallButton name="splitOrdersParts" icon="genealogyIcon16.png"
                           action="#{grid}.fireEvent(splitOrdersParts)"/>
                <smallButton name="splitOrders" icon="genealogyIcon16.png"
                           action="#{grid}.fireEvent(splitOrders)"/>
            </group>
        </ribbon>

        <component type="grid" name="orders" reference="grid">
            <script>
                <![CDATA[
					var deleteButton = #{window}.getRibbonItemOrNull("orderListActions.delete");
					var copyButton = #{window}.getRibbonItemOrNull("orderListActions.copy");
					var acceptOrder = #{window}.getRibbonItem("status.acceptOrder");
					var declineOrder = #{window}.getRibbonItem("status.declineOrder");
					var interruptOrder = #{window}.getRibbonItem("status.interruptOrder");
					var splitOrdersParts = #{window}.getRibbonItemOrNull("split.splitOrdersParts");
					var splitOrders = #{window}.getRibbonItemOrNull("split.splitOrders");

					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
							    acceptOrder.disable();
								declineOrder.disable();
								interruptOrder.disable();
								if (deleteButton)
								    deleteButton.disable();
								if (copyButton)
								    copyButton.disable();
								splitOrdersParts.disable("#{translate(orders.orders.ribbon.message.splitOrdersParts)}");
								splitOrders.disable("#{translate(orders.orders.ribbon.message.splitOrders)}");
							} else {
							    var noDifferentStates = true;

							    if(selectedEntitiesArray.length > 1) {
									for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
										if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
											noDifferentStates = false;
											break;
										}
									}
								}
								if (noDifferentStates) {
									var selectedEntityStatus = selectedEntitiesArray[0].fields.state;

									if (selectedEntityStatus == '01pending') {
										 splitOrdersParts.enable("#{translate(orders.orders.ribbon.message.splitOrdersParts)}");
								        splitOrders.enable("#{translate(orders.orders.ribbon.message.splitOrders)}");

										acceptOrder.enable();
										acceptOrder.state = "accept";
										acceptOrder.setLabel("#{translate(orders.ordersPlanningList.window.ribbon.status.acceptOrder)}");
										acceptOrder.setIcon('startIcon16.png');
										declineOrder.enable();
										declineOrder.state = "decline";
										declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.declineOrder)}");
										declineOrder.setIcon('deleteIcon16.png');
										interruptOrder.disable();
									} else if (selectedEntityStatus == '02accepted') {
										acceptOrder.enable();
										acceptOrder.state = "begin";
										acceptOrder.setLabel("#{translate(orders.ordersPlanningList.window.ribbon.status.activateOrder)}");
										acceptOrder.setIcon('startIcon16.png');
										declineOrder.enable();
										declineOrder.state = "decline";
										declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.declineOrder)}");
										declineOrder.setIcon('deleteIcon16.png');
										interruptOrder.disable();
									} else if (selectedEntityStatus == '03inProgress') {
										acceptOrder.enable();
										acceptOrder.state = "finish";
										acceptOrder.setLabel("#{translate(orders.ordersPlanningList.window.ribbon.status.finishOrder)}");
										acceptOrder.setIcon('acceptIcon16.png');
										declineOrder.enable();
										declineOrder.state = "abandon";
										declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.abandonOrder)}");
										declineOrder.setIcon('deleteIcon16.png');
										interruptOrder.enable();
									} else if (selectedEntityStatus == '06interrupted') {
										acceptOrder.enable();
	 									acceptOrder.state = "restart";
	 									acceptOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.restartOrder)}");
	 									acceptOrder.setIcon('acceptIcon16.png');
										declineOrder.enable();
										declineOrder.state = "abandon";
										declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.abandonOrder)}");
										declineOrder.setIcon('deleteIcon16.png');
										interruptOrder.disable();
									} else {
										acceptOrder.disable();
										declineOrder.disable();
										interruptOrder.disable();
									}
								} else {
									acceptOrder.disable("#{translate(orders.orders.ribbon.message.ordersWithDifferentStatesSelected)}");
									declineOrder.disable("#{translate(orders.orders.ribbon.message.ordersWithDifferentStatesSelected)}");
									interruptOrder.disable("#{translate(orders.orders.ribbon.message.ordersWithDifferentStatesSelected)}");
									splitOrdersParts.disable("#{translate(orders.orders.ribbon.message.splitOrdersParts)}");
								    splitOrders.disable("#{translate(orders.orders.ribbon.message.splitOrders)}");
								}

								if (copyButton) copyButton.enable();

								var canNotDelete = false;

								for (var i in selectedEntitiesArray) {
									var state = selectedEntitiesArray[i].fields.state;
									if (state =="02accepted" || state =="03inProgress" || state == "04completed" || state =="06interrupted" || state =="07abandoned") {
                   			 			canNotDelete = true;
										break;
									}
								}
                                if (deleteButton){
                                    if (canNotDelete) {
                                        deleteButton.disable("#{translate(orders.orders.ribbon.message.someStateIsIncorrectForDelete)}");
                                    } else {
                                        deleteButton.enable();
                                    }
								}
							}
						}
					}

					this.addOnChangeListener(listener);
				]]>
            </script>
            <option type="column" name="number" fields="number" link="true" width="60"/>
            <option type="column" name="name" fields="name" link="true" width="100"/>
            <option type="column" name="state" fields="state" width="30"/>
            <option type="column" name="dateFrom" fields="startDate" width="50"/>
            <option type="column" name="dateTo" fields="finishDate" width="50"/>
            <option type="column" name="deadline" fields="deadline" width="50"/>
            <option type="column" name="technologyNumber" fields="technologyNumber" width="60"/>
            <option type="column" name="productNumber" fields="productNumber" width="60"/>
            <option type="column" name="plannedQuantity" fields="plannedQuantity" width="35"/>
            <option type="column" name="unit" fields="unit" width="30"/>
			<option type="column" name="plannedQuantityForAdditionalUnit" fields="plannedQuantityForAdditionalUnit" width="35"/>
			<option type="column" name="unitForAdditionalUnit" fields="unitForAdditionalUnit" width="15"/>
            <option type="column" name="additionalFinalProducts" fields="additionalFinalProducts" width="60"/>
            <option type="column" name="companyName" fields="companyName" width="50"/>
			<option type="column" name="orderCategory" fields="orderCategory" width="40"/>
			<option type="column" name="dateChange" fields="dateChange" width="30"/>

            <option type="correspondingView" value="orders/orderDetails"/>
            <option type="correspondingComponent" value="form"/>

            <option type="order" column="deadline" direction="desc"/>

            <option type="searchable"
                    value="additionalFinalProducts,name,number,state,dateFrom,dateTo,deadline,technologyNumber,productNumber,productName,plannedQuantity,unit,companyName,plannedQuantityForAdditionalUnit,unitForAdditionalUnit,orderCategory,dateChange"/>
            <option type="orderable"
                    value="additionalFinalProducts,name,number,state,dateFrom,dateTo,deadline,technologyNumber,productNumber,productName,plannedQuantity,unit,companyName,plannedQuantityForAdditionalUnit,unitForAdditionalUnit,orderCategory,dateChange"/>

            <option type="footerRow" value="true"/>
            <option type="columnsToSummary" value="plannedQuantity,plannedQuantityForAdditionalUnit"/>

            <option type="fullscreen" value="true"/>
            <option type="multiselect" value="true"/>

            <listener event="changeState" class="com.qcadoo.mes.orders.listeners.OrdersListListeners" method="changeState"/>
            <listener event="splitOrdersParts"
                      class="com.qcadoo.mes.orders.listeners.OrdersPlanningListListeners"
                      method="splitOrdersParts"/>
            <listener event="splitOrders"
                      class="com.qcadoo.mes.orders.listeners.OrdersPlanningListListeners"
                      method="splitOrders"/>
        </component>

        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>
    </component>

</view>
