<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_MATERIAL_FLOW" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view" xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="palletStorageStateList" modelName="palletStorageStateDto" menuAccessible="true">
    <component type="window" name="window" reference="window">
        <ribbon>
            <group name="actions">
                <bigButton name="refresh" icon="updateIcon24.png" state="enabled" action="#{grid}.performRefresh;"
                           accesskey="r"/>
            </group>
            <group name="genericExport">
                <smallButton name="csv" state="enabled" icon="exportToCsvIcon16.png">
                    <script>
                        <![CDATA[
                            this.addOnChangeListener({
                                onClick: function() {
                                    #{grid}.performEvent('exportToCsv', [], 'exportToCsv');
                                }
                            });
                        ]]>
                    </script>
                </smallButton>
                <smallButton name="pdf" state="enabled" icon="pdfIcon16.png">
                    <script>
                        <![CDATA[
                            this.addOnChangeListener({
                                onClick: function() {
                                    #{grid}.performEvent('exportToPdf', [], 'exportToPdf');
                                }
                            });
                        ]]>
                    </script>
                </smallButton>
            </group>
            <group name="details">
                <bigButton name="showDetails" icon="generateIcon24.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if(window.canClose()) {
										#{grid}.performEvent('showDetails', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
                <bigButton name="showPalletsWithProductsToShift" icon="generateIcon24.png" message="materialFlowResources.palletStorageStateList.window.ribbon.details.showPalletsWithProductsToShift.description">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if(window.canClose()) {
										#{grid}.performEvent('showPalletsWithProductToShift', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
                <bigButton name="showPalletsWithFreeSpace" icon="generateIcon24.png" message="materialFlowResources.palletStorageStateList.window.ribbon.details.showPalletsWithFreeSpace.description">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if(window.canClose()) {
										#{grid}.performEvent('showPallestWithFreeSpace', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
                <bigButton name="showAllPallets" icon="generateIcon24.png">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if(window.canClose()) {
										#{grid}.performEvent('showAllPallets', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
            </group>

            <group name="movePallets">
                <bigButton name="moveToStorageLocation" icon="startIcon24.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if(window.canClose()) {
										#{grid}.performEvent('moveToStorageLocation', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
                <bigButton name="transferResources" icon="startIcon24.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if(window.canClose()) {
										#{grid}.performEvent('transferResources', []);
									}
								}
							});
						]]>
                    </script>
                </bigButton>
            </group>
        </ribbon>

        <component type="grid" name="grid" reference="grid">
            <script>
                <![CDATA[
					var moveToStorageLocationButton = #{window}.getRibbonItem("movePallets.moveToStorageLocation");
					var transferResourcesButton = #{window}.getRibbonItem("movePallets.transferResources");
					var showDetailsButton = #{window}.getRibbonItem("details.showDetails");
					this.addOnChangeListener({
                        onChange: function(selectedEntitiesArray) {
                            moveToStorageLocationButton.disable();
                            transferResourcesButton.disable();
                            showDetailsButton.disable("#{translate(materialFlowResources.palletStorageStateList.ribbon.message.selectOneRecord)}");

                            if (selectedEntitiesArray && selectedEntitiesArray.length > 0) {
                                if (selectedEntitiesArray.length === 1) {
                                    showDetailsButton.enable();
                                }
                                moveToStorageLocationButton.enable();
                                transferResourcesButton.enable();
                            }
                        }
                    });
				]]>
            </script>

            <option type="column" name="palletNumber" fields="palletNumber"/>
            <option type="column" name="typeOfLoadUnit" fields="typeOfLoadUnit"/>
            <option type="column" name="storageLocationNumber" fields="storageLocationNumber"/>
            <option type="column" name="locationNumber" fields="locationNumber"/>

            <option type="order" column="palletNumber" direction="asc"/>
            <option type="searchable"
                    value="palletNumber,typeOfLoadUnit,storageLocationNumber,locationNumber"/>
            <option type="orderable"
                    value="palletNumber,typeOfLoadUnit,storageLocationNumber,locationNumber"/>

            <option type="fullscreen" value="true"/>
            <option type="multiselect" value="true"/>

            <criteriaModifier class="com.qcadoo.mes.materialFlowResources.criteriaModifiers.PalletStorageStateCriteriaModifier"
                              method="restrictToUserLocations"/>
            <listener event="showDetails"
                      class="com.qcadoo.mes.materialFlowResources.listeners.PalletStorageStateListListeners"
                      method="showDetails"/>
             <listener event="showAllPallets"
                       class="com.qcadoo.mes.materialFlowResources.listeners.PalletStorageStateListListeners"
                       method="showAllPallets"/>
             <listener event="showPalletsWithProductToShift"
                       class="com.qcadoo.mes.materialFlowResources.listeners.PalletStorageStateListListeners"
                       method="showPalletsWithProductToShift"/>
             <listener event="showPallestWithFreeSpace"
                       class="com.qcadoo.mes.materialFlowResources.listeners.PalletStorageStateListListeners"
                       method="showPallestWithFreeSpace"/>

            <listener event="moveToStorageLocation"
                      class="com.qcadoo.mes.materialFlowResources.listeners.PalletStorageStateListListeners"
                      method="moveToStorageLocation"/>

            <listener event="transferResources"
                      class="com.qcadoo.mes.materialFlowResources.listeners.PalletStorageStateListListeners"
                      method="transferResources"/>

        </component>
        <component type="checkbox" name="isShiftFilter" reference="isShiftFilter" defaultVisible="false" defaultEnabled="false"/>
        <component type="checkbox" name="isFreeFilter" reference="isFreeFilter" defaultVisible="false" defaultEnabled="false"/>

        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>
    </component>

    <hooks>
        <beforeRender
                class="com.qcadoo.mes.materialFlowResources.hooks.PalletStorageStateListHooks"
                method="applyFilters"/>
    </hooks>

</view>