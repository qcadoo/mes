<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_MATERIAL_FLOW"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="repackingList"
      modelName="repacking"
      menuAccessible="true">

    <component type="window" name="window" reference="window">
        <ribbon>
            <template name="standardGridTemplate" excludeItems="actions.copy"/>
            <group name="state">
                <smallButton name="accept" icon="startIcon16.png" state="enabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
								    if (window.confirm("#{translate(materialFlowResources.repackingDetails.window.ribbon.status.acceptRepacking.confirm)}")) {
                                        #{grid}.performEvent('changeState', ["02accepted"]);
                                    }
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="reject" icon="deleteIcon16.png" state="enabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
								    if (window.confirm("#{translate(materialFlowResources.repackingDetails.window.ribbon.status.rejectRepacking.confirm)}")) {
                                        #{grid}.performEvent('changeState', ["03rejected"]);
                                    }
								}
							});
						]]>
                    </script>
                </smallButton>
            </group>
        </ribbon>

        <component type="grid" name="grid" reference="grid">
            <script>
                <![CDATA[
						var deleteBtn = #{window}.getRibbonItem("actions.delete");
						var acceptBtn = #{window}.getRibbonItem("state.accept");
						var rejectBtn = #{window}.getRibbonItem("state.reject");

						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									deleteBtn.disable();
									acceptBtn.disable();
									rejectBtn.disable();
								} else {
									var noDifferentStates = true;

	 								if(selectedEntitiesArray.length > 1){
										for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
											if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
												noDifferentStates = false;
												break;
											}
										}
									}
									if (selectedEntitiesArray.length == 1 || noDifferentStates) {
										var state = selectedEntitiesArray[0].fields.state;

										if (state == "01draft") {
											deleteBtn.enable();
											acceptBtn.enable();
											rejectBtn.enable();
										} else if (state == "02accepted") {
											deleteBtn.disable();
											acceptBtn.disable();
											rejectBtn.disable();
										} else if (state == "03rejected") {
											deleteBtn.enable();
											acceptBtn.disable();
											rejectBtn.disable();
										}
									} else {
                                        deleteBtn.disable();
                                        acceptBtn.disable();
                                        rejectBtn.disable();
									}
								}
							}
						}

						this.addOnChangeListener(listener);
					]]>
            </script>
            <option type="column" name="number" fields="number" link="true" width="70"/>
            <option type="column" name="location" fields="location" expression="#location['number']" link="true"/>
            <option type="column" name="storageLocation" fields="storageLocation" expression="#storageLocation['number']" link="true"/>
            <option type="column" name="palletNumber" fields="palletNumber" expression="#palletNumber['number']" link="true"/>
            <option type="column" name="typeOfLoadUnit" fields="typeOfLoadUnit" expression="#typeOfLoadUnit['name']" link="true"/>
            <option type="column" name="time" fields="time" width="100"/>
            <option type="column" name="staff" fields="staff"
                    expression="#staff['name'] + ' ' + #staff['surname']" width="150"/>
            <option type="column" name="state" fields="state" width="100"/>
            <option type="column" name="description" fields="description"/>

            <option type="order" column="time" direction="desc"/>

            <option type="searchable"
                    value="number,location,storageLocation,palletNumber,typeOfLoadUnit,time,state,description"/>
            <option type="orderable"
                    value="number,location,storageLocation,palletNumber,typeOfLoadUnit,time,state,description"/>

            <option type="correspondingView" value="materialFlowResources/repackingDetails"/>
            <option type="correspondingComponent" value="form"/>

            <listener event="changeState" class="com.qcadoo.mes.materialFlowResources.listeners.RepackingListListeners" method="changeState"/>

            <option type="fullscreen" value="true"/>
            <option type="multiselect" value="true"/>
        </component>

        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>
    </component>

    <hooks>
    </hooks>
</view>
