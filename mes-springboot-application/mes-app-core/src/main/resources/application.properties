# Spring Boot application properties

# Server Properties
server.port=8080

# Application General Properties (migrated from app.properties)
spring.application.name=mes-springboot-application
# Example: qcadoo.mes.display-name=Qcadoo MES Spring Boot
# Example: spring.web.locale=pl
# Other app.properties will be migrated as corresponding features are implemented

# Datasource Properties (migrated from db.properties)
spring.datasource.url=jdbc:postgresql://localhost:5432/mes_db_springboot
spring.datasource.username=mes_user
spring.datasource.password=mes_password
spring.datasource.driver-class-name=org.postgresql.Driver
# HikariCP is the default connection pool in Spring Boot 2+
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# JPA / Hibernate Properties (migrated from db.properties)
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update # or validate, none, create, create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.generate_statistics=false
# Spring Boot 2.x+ enables second-level cache via spring.jpa.properties.hibernate.cache.use_second_level_cache=true
# and spring.jpa.properties.hibernate.cache.use_query_cache=true
# along with a cache provider like EhCache or Hazelcast.
# For now, leaving these out until a cache provider is explicitly added.
# spring.jpa.properties.hibernate.cache.provider_class=org.hibernate.cache.HashtableCacheProvider # Deprecated, use region factory
# spring.jpa.properties.hibernate.cache.region.factory_class= # e.g., org.hibernate.cache.ehcache.EhCacheRegionFactory

# Mail Properties (migrated from mail.properties)
spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=user@example.com
spring.mail.password=secret
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true # For TLS
# spring.mail.properties.mail.smtp.ssl.enable=true # For SSL, if needed
# spring.mail.properties.mail.smtp.protocols=TLSv1.2
spring.mail.test-connection=false # Set to true to test mail server connection on startup

# Logging Configuration
logging.level.root=INFO
logging.level.com.qcadoo.mes.springboot=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=INFO
# logging.file.name=logs/mes-springboot.log # Example: to log to a file
# logging.file.path= # Define path if logging.file.name is just a name

# Placeholder for Connector Properties (from connectors.properties)
# These will be environment-specific and should use Spring Profiles (e.g., application-dev.properties)
# Example: qcadoo.connector.scada.location=
# Example: qcadoo.connector.scada.username=
# Example: qcadoo.connector.pipedrive.apiToken=

# Placeholder for Mailing Properties (from mailing.properties)
# Example: qcadoo.mailing.delivery-template-email=
# Example: qcadoo.mailing.sendinblue.apikey=

# Placeholder for Report Properties (from report.properties)
# Example: qcadoo.report.path=
# Example: qcadoo.report.font-path=

# ESAPI Properties (from .esapi/ESAPI.properties and validation.properties)
# These are critical and require special handling for security and loading.
# They will be addressed in a dedicated step.
# Key properties to consider for secure management:
# Encryptor.MasterKey
# Encryptor.MasterSalt
# The ESAPI properties files themselves might need to be loaded via a custom mechanism
# or by ensuring ESAPI can find them in its expected location if ESAPI is retained.

# Default locale from app.properties
# spring.web.locale=pl # Example, if 'pl' was the default

# Custom application properties from app.properties can be prefixed
# qcadoo.mes.applicationDisplayName=TEST QCD MES Spring Boot
# qcadoo.mes.ignoreMissingTranslations=true
# qcadoo.mes.useCustomTranslations=false
# qcadoo.mes.showExceptionDetails=false # Spring Boot default is false for production (error page)
# qcadoo.mes.passwordEncoder=bcrypt # This will be handled by Spring Security config

# Note on QCADOO_CONF:
# The strategy is to move configurations into Spring Boot's standard mechanisms
# (application.properties, profiles, environment variables, or dedicated config server for secrets)
# rather than relying on an external QCADOO_CONF directory structure for the new application.
# Specific files like ESAPI properties might need special handling to be loaded from a secure, external location.

# Hikari specific settings from db.properties (already covered by spring.datasource.hikari.*)
# hikariMaximumPoolSize=15
# hikariConnectionTimeout=30000
# hikariIdleTimeout=600000
# hikariMaxLifetime=1800000
